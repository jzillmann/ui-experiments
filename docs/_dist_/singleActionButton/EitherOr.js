import './EitherOr.css.proxy.js';
/* src/singleActionButton/EitherOr.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

const get_or_slot_changes = dirty => ({});
const get_or_slot_context = ctx => ({});
const get_either_slot_changes = dirty => ({});
const get_either_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	const either_slot_template = /*#slots*/ ctx[2].either;
	const either_slot = create_slot(either_slot_template, ctx, /*$$scope*/ ctx[1], get_either_slot_context);
	const or_slot_template = /*#slots*/ ctx[2].or;
	const or_slot = create_slot(or_slot_template, ctx, /*$$scope*/ ctx[1], get_or_slot_context);

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (either_slot) either_slot.c();
			t = space();
			div1 = element("div");
			if (or_slot) or_slot.c();
			attr(div0, "class", "front relative z-10 svelte-1no8mo5");
			attr(div1, "class", "back absolute svelte-1no8mo5");
			attr(div2, "class", "flip relative svelte-1no8mo5");
			toggle_class(div2, "or", !/*either*/ ctx[0]);
			attr(div3, "class", "root svelte-1no8mo5");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);

			if (either_slot) {
				either_slot.m(div0, null);
			}

			append(div2, t);
			append(div2, div1);

			if (or_slot) {
				or_slot.m(div1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (either_slot) {
				if (either_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(either_slot, either_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_either_slot_changes, get_either_slot_context);
				}
			}

			if (or_slot) {
				if (or_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(or_slot, or_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_or_slot_changes, get_or_slot_context);
				}
			}

			if (dirty & /*either*/ 1) {
				toggle_class(div2, "or", !/*either*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(either_slot, local);
			transition_in(or_slot, local);
			current = true;
		},
		o(local) {
			transition_out(either_slot, local);
			transition_out(or_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (either_slot) either_slot.d(detaching);
			if (or_slot) or_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { either = true } = $$props;

	$$self.$$set = $$props => {
		if ("either" in $$props) $$invalidate(0, either = $$props.either);
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [either, $$scope, slots];
}

class EitherOr extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { either: 0 });
	}
}

export default EitherOr;